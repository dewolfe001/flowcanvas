!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).FlowCanvas={})}(this,(function(t){"use strict";const e=20;class s{constructor(t,s,i,r="Node"){this.canvas=t,this.x=Math.round(s/e)*e,this.y=Math.round(i/e)*e,this.width=100,this.height=40,this.label=r,this.id=generateId("node"),this.rect=document.createElementNS("http://www.w3.org/2000/svg","rect"),this.text=document.createElementNS("http://www.w3.org/2000/svg","text"),this.rect.setAttribute("x",this.x),this.rect.setAttribute("y",this.y),this.rect.setAttribute("width",this.width),this.rect.setAttribute("height",this.height),this.rect.setAttribute("fill","#fff"),this.rect.setAttribute("stroke","#333"),this.rect.setAttribute("rx","5"),this.rect.setAttribute("ry","5"),this.text.setAttribute("x",this.x+10),this.text.setAttribute("y",this.y+25),this.text.textContent=r,this.isDragging=!1,this.offsetX=0,this.offsetY=0,this.initDrag(),t.addNode(this)}initDrag(){this.rect.addEventListener("mousedown",(t=>{this.isDragging=!0,this.offsetX=t.clientX-parseFloat(this.rect.getAttribute("x")),this.offsetY=t.clientY-parseFloat(this.rect.getAttribute("y")),document.body.style.cursor="grabbing"})),document.addEventListener("mousemove",(t=>{if(this.isDragging){let s=t.clientX-this.offsetX,i=t.clientY-this.offsetY;s=Math.round(s/e)*e,i=Math.round(i/e)*e,this.rect.setAttribute("x",s),this.rect.setAttribute("y",i),this.text.setAttribute("x",s+10),this.text.setAttribute("y",i+25),this.x=s,this.y=i,this.onMoveCallback&&this.onMoveCallback()}})),document.addEventListener("mouseup",(()=>{this.isDragging=!1,document.body.style.cursor="default"}))}onMove(t){this.onMoveCallback=t}setSelected(t){this.isSelected=t,this.rect.setAttribute("stroke",t?"#0096ff":"#333"),this.rect.setAttribute("stroke-width",t?"3":"1")}}class i{constructor(t,e,s){this.source=e,this.target=s,this.path=document.createElementNS("http://www.w3.org/2000/svg","path"),this.path.setAttribute("class","connector"),t.addConnector(this),this.update()}update(){const t=this.source.x+this.source.width/2,e=this.source.y+this.source.height/2,s=this.target.x+this.target.width/2,i=this.target.y+this.target.height/2,r=.5*(s-t),h=`M ${t} ${e} C ${t+r} ${e+0}, ${s-r} ${i+0}, ${s} ${i}`;this.path.setAttribute("d",h)}}let r={};t.Canvas=class{constructor(t){this.svg=t,this.nodes=[],this.connectors=[],this.history=[],this.currentStateIndex=-1}addNode(t){this.nodes.push(t),this.svg.appendChild(t.rect),this.svg.appendChild(t.text)}addConnector(t){this.connectors.push(t),this.svg.appendChild(t.path)}updateConnectorsFor(t){this.connectors.forEach((e=>{e.source!==t&&e.target!==t||e.update()}))}exportDiagram(){return{nodes:this.nodes.map((t=>({id:t.id,x:t.x,y:t.y,label:t.label,width:t.width,height:t.height}))),connectors:this.connectors.map((t=>({source:t.source.id,target:t.target.id})))}}importDiagram(t){this.nodes.forEach((t=>{t.rect.remove(),t.text.remove()})),this.connectors.forEach((t=>t.path.remove())),this.nodes=[],this.connectors=[];const e={};t.nodes.forEach((t=>{const i=new s(this,t.x,t.y,t.label);i.id=t.id,e[t.id]=i})),t.connectors.forEach((t=>{const s=e[t.source],r=e[t.target];s&&r&&new i(this,s,r)}))}takeSnapshot(){this.currentStateIndex++,this.history[this.currentStateIndex]=JSON.stringify(this.exportDiagram()),this.history=this.history.slice(0,this.currentStateIndex+1)}undo(){this.currentStateIndex>0&&(this.currentStateIndex--,this.importDiagram(JSON.parse(this.history[this.currentStateIndex])))}redo(){this.currentStateIndex<this.history.length-1&&(this.currentStateIndex++,this.importDiagram(JSON.parse(this.history[this.currentStateIndex])))}},t.Connector=i,t.Node=s,t.generateId=function(t="id"){return r[t]||(r[t]=1),`${t}${r[t]++}`}}));
